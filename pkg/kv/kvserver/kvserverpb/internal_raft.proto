// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto2";
package cockroach.kv.kvserver.storagepb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvserverpb";

import "gogoproto/gogo.proto";

// RaftTruncatedState contains metadata about the truncated portion of the raft log.
// Raft requires access to the term of the last truncated log entry even after the
// rest of the entry has been discarded.
message RaftTruncatedState {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;

  // The highest index that has been removed from the log.
  optional uint64 index = 1 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftIndex"];
  // The term corresponding to 'index'.
  optional uint64 term = 2 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftTerm"];
}

// RangeTombstone contains information about a replica that has been deleted.
message RangeTombstone {
  // NextReplicaID is the minimal ReplicaID of the RangeID that can be created
  // on this Store. All incarnations of the RangeID under lower ReplicaID have
  // been destroyed.
  optional int32 next_replica_id = 1 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "NextReplicaID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
  // NextLogID is the minimal raft state LogID of the RangeID that can be
  // created on this Store. All lower LogIDs have been applied to the state
  // machine and marked as destroyed.
  optional int32 next_log_id = 2 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "NextLogID",
    (gogoproto.casttype) = "LogID"];
}

// RaftReplicaID contains the mapping of a state machine replica onto its
// corresponding raft state in the log engine.
message RaftReplicaID {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;

  // ReplicaID is the ID of the replica with the corresponding HardState.
  optional int32 replica_id = 1 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "ReplicaID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
  // LogID is the raft state LogID.
  optional uint64 log_id = 2 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "LogID",
    (gogoproto.casttype) = "LogID"];
}
